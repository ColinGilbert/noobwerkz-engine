
#pragma once
#include "Config.hpp"
#include "Drawable3D.hpp"

#include "Graphics.hpp"
#include "MathFuncs.hpp"
#include "VoxelWorld.hpp"
#include "HACDRenderer.hpp"
#include "TriplanarGradientMap.hpp"
#include "TransformHelper.hpp"

#include <string>

// #include <es/entity.hpp>
// #include <es/component.hpp>
// #include <es/storage.hpp>

#include "reactphysics3d.h"

namespace noob
{
	class stage
	{
		public:
			stage() : physics_world(rp3d::Vector3(0.0, 9.81, 0.0), 1.0/60.0) {}
			void init();
			void update();
			void draw();

			std::array<noob::vec4, 6> extract_planes(const noob::mat4& mvp);

			
		protected:
			noob::hacd_renderer hacd_render;
			noob::triplanar_renderer triplanar_render;

			noob::mat4 view_mat;
			noob::mat4 projection_mat;
			rp3d::DynamicsWorld physics_world;

			std::vector<noob::scenery> sceneries;
			std::vector<noob::prop> props;
			std::vector<noob::actor> actors;
			
			// es::storage world;
	};
}

